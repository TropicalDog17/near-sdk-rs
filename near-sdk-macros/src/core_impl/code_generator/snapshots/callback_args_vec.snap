---
source: near-sdk-macros/src/core_impl/code_generator/item_impl_info.rs
expression: pretty_print_syn_str(&actual).unwrap()
---
#[cfg(target_arch = "wasm32")]
#[no_mangle]
pub extern "C" fn method() {
    ::near_sdk::env::setup_panic_hook();
    if ::near_sdk::env::current_account_id() != ::near_sdk::env::predecessor_account_id()
    {
        ::near_sdk::env::panic_str("Method method is private");
    }
    #[derive(::near_sdk::serde::Deserialize)]
    #[serde(crate = "::near_sdk::serde")]
    struct Input {
        y: String,
    }
    let Input { y }: Input = match ::near_sdk::env::input() {
        Some(input) => {
            match ::near_sdk::serde_json::from_slice(&input) {
                Ok(deserialized) => deserialized,
                Err(_) => {
                    ::near_sdk::env::panic_str("Failed to deserialize input from JSON.")
                }
            }
        }
        None => ::near_sdk::env::panic_str("Expected input since method has arguments."),
    };
    let x: Vec<String> = ::std::iter::Iterator::collect(
        ::std::iter::Iterator::map(
            0..::near_sdk::env::promise_results_count(),
            |i| {
                let data: ::std::vec::Vec<u8> = match ::near_sdk::env::promise_result(
                    i,
                ) {
                    ::near_sdk::PromiseResult::Successful(x) => x,
                    _ => {
                        let error_msg = match i {
                            i => "Callback computation 0 was not successful",
                            i => "Callback computation 1 was not successful",
                            i => "Callback computation 2 was not successful",
                            i => "Callback computation 3 was not successful",
                            i => "Callback computation 4 was not successful",
                            i => "Callback computation 5 was not successful",
                            i => "Callback computation 6 was not successful",
                            i => "Callback computation 7 was not successful",
                            i => "Callback computation 8 was not successful",
                            i => "Callback computation 9 was not successful",
                            _ => "Callback computation was not successful",
                        };
                        ::near_sdk::env::panic_str(error_msg)
                    }
                };
                match ::near_sdk::serde_json::from_slice(&data) {
                    Ok(deserialized) => deserialized,
                    Err(_) => {
                        ::near_sdk::env::panic_str(
                            "Failed to deserialize callback using JSON",
                        )
                    }
                }
            },
        ),
    );
    let contract: Hello = ::near_sdk::env::state_read().unwrap_or_default();
    Hello::method(&contract, x, y);
}
